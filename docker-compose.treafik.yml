version: '3.3'

services:
  api:
    # your image
    image: node-app
    deploy:
      mode: replicated
      # run at least 3 replicas for rolling updates
      replicas: 3
      placement:
        constraints:
          - node.labels.GeneralPurposeNode == true
          # using isWorker true instead of using docker swarms integrated role labels
          # to have the ability to place this service on managers that act as workers
          - node.labels.isWorker == true
      resources:
        limits:
          cpus: '2'
          memory: 2048M
        reservations:
          cpus: '0'
          memory: 0M
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.lametric-api-http.rule=Host(`app.yourdomain.com`)
        - traefik.http.routers.lametric-api-http.entrypoints=http
        - traefik.http.routers.lametric-api-http.middlewares=https-redirect
        - traefik.http.routers.lametric-api-https.rule=Host(`app.yourdomain.com`)
        - traefik.http.routers.lametric-api-https.entrypoints=https
        - traefik.http.routers.lametric-api-https.tls=true
        - traefik.http.routers.lametric-api-https.tls.certresolver=le
        - traefik.http.services.lametric-api.loadbalancer.server.port=3000
      restart_policy:
        condition: on-failure
    environment:
      - MONGODB_URL=mongodb://mongodb:27017/lametric-ebay
    depends_on:
      - mongodb
    networks:
      - traefik-public
      - default
  
  # uncomment if you are not unsing an external mongodb
  # mongodb:
  #   image: mongo:4.2.1-bionic
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #     placement:
  #       constraints:
  #         - node.labels.PersistantNode == true
  #         - node.labels.DatabaseNode == true
  #         - node.labels.isWorker == true
  #     resources:
  #       limits:
  #         cpus: '2'
  #         memory: 2048M
  #       reservations:
  #         cpus: '0'
  #         memory: 0M
  #     restart_policy:
  #       condition: on-failure
  #   networks:
  #     - default
  #   volumes:
  #     - db-data:/data/db

  redis:
    image: redis:6
    deploy:
      mode: replicated
      # do not increase: redis does not store any critical information
      # use vertical scaling instead of horizontal scaling
      replicas: 1
      placement:
        constraints:
          - node.labels.PersistantNode == true
          - node.labels.RedisNode == true
          - node.labels.isWorker == true
      resources:
        limits:
          cpus: '2'
          memory: 2048M
        reservations:
          cpus: '0'
          memory: 0M
      restart_policy:
        condition: on-failure
    networks:
      - default
    volumes:
      - redis-data:/data

volumes:
  # db-data:
  redis-data:

networks:
  # Use the previously created public network "traefik-public", shared with other
  # services that need to be publicly available via this Traefik
  traefik-public:
    external: true
