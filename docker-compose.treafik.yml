version: '3.3'

services:
  node-app:
    # your image
    image: node-app
    deploy:
      mode: replicated
      # run at least 3 replicas for rolling updates
      replicas: 3
      update-delay: 5s
      # do not increase if you have less than 9 replicas
      update-parallelism: 1
      placement:
        constraints:
          - node.labels.GeneralPurposeNode == true
          # using isWorker true instead of using docker swarms integrated role labels
          # to have the ability to place this service on managers that act as workers
          - node.labels.isWorker == true
      resources:
        limits:
          cpus: '2'
          memory: 2048M
        reservations:
          cpus: '0'
          memory: 0M
      restart_policy:
        condition: on-failure
    environment:
      - MONGODB_URL=mongodb://mongodb/lametric-ebay
    depends_on:
      - mongodb
    networks:
      - traefik-public
    labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-public
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-public-http.rule=Host(`app.yourdomain.com`)
        - traefik.http.routers.traefik-public-http.entrypoints=http
        - traefik.http.routers.traefik-public-http.middlewares=https-redirect
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-public-https.rule=Host(`app.yourdomain.com`)
        - traefik.http.routers.traefik-public-https.entrypoints=https
        - traefik.http.routers.traefik-public-https.tls=true
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.traefik-public-https.tls.certresolver=le
        # Define the port inside of the Docker service to use
        - traefik.http.services.traefik-public.loadbalancer.server.port=3000
  
  # uncomment if you are not unsing an external mongodb
  # mongodb:
  #   image: mongo:4.2.1-bionic
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #     update-delay: 0s
  #     placement:
  #       constraints:
  #         - node.labels.PersistantNode == true
  #         - node.labels.DatabaseNode == true
  #         - node.labels.isWorker == true
  #     resources:
  #       limits:
  #         cpus: '2'
  #         memory: 2048M
  #       reservations:
  #         cpus: '0'
  #         memory: 0M
  #   volumes:
  #     - db-data:/data/db

  redis:
    image: redis:6
    deploy:
      mode: replicated
      # do not increase: redis does not store any critical information
      # use vertical scaling instead of horizontal scaling
      replicas: 1
      placement:
        constraints:
          - node.labels.PersistantNode == true
          - node.labels.RedisNode == true
          - node.labels.isWorker == true
      resources:
        limits:
          cpus: '2'
          memory: 2048M
        reservations:
          cpus: '0'
          memory: 0M
    restart: unless-stopped
    volumes:
      - redis-data:/data

volumes:
  # db-data:
  redis-data:

networks:
  # Use the previously created public network "traefik-public", shared with other
  # services that need to be publicly available via this Traefik
  traefik-public:
    external: true
